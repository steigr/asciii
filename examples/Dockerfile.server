# Use Debian 16.04 as the base for our Rust musl toolchain, because of
# https://github.com/rust-lang/rust/issues/34978 (as of Rust 1.11).
FROM ubuntu:16.04 AS builder

# The Rust toolchain to use when building our image.  Set by `hooks/build`.
# # this addresses the lifecycle()-Bug ( see: https://github.com/briansmith/ring/issues/598 )
ARG TOOLCHAIN=nightly-2017-12-21

# Make sure we have basic dev tools for building C libraries.  Our goal
# here is to support the musl-libc builds and Cargo builds needed for a
# large selection of the most popular crates.
#
# We also set up a `rust` user by default, in whose account we'll install
# the Rust toolchain.  This user has sudo privileges if you need to install
# any more software.
RUN apt-get update && \
    apt-get install -y \
        build-essential \
        cmake \
        curl \
        file \
        git \
        musl-dev \
        musl-tools \
        libpq-dev \
        libsqlite-dev \
        libssl-dev \
        pkgconf \
        sudo \
        xutils-dev \
        && \
    apt-get clean && rm -rf /var/lib/apt/lists/* && \
    useradd rust --user-group --create-home --shell /bin/bash --groups sudo

# Allow sudo without a password.
RUN echo '%sudo   ALL=(ALL:ALL) NOPASSWD:ALL' | install -D -m 0600 /dev/stdin /etc/sudoers.d/nopasswd

# Run all further code as user `rust`, and create our working directories
# as the appropriate user.
USER rust
RUN mkdir -p /home/rust/libs /home/rust/src

# Set up our path with all our binary directories, including those for the
# musl-gcc toolchain and for our Rust toolchain.
ENV PATH=/home/rust/.cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Install our Rust toolchain and the `musl` target.  We patch the
# command-line we pass to the installer so that it won't attempt to
# interact with the user or fool around with TTYs.  We also set the default
# `--target` to musl so that our users don't need to keep overriding it
# manually.
RUN curl https://sh.rustup.rs -sSf | \
    sh -s -- -y --default-toolchain $TOOLCHAIN && \
    rustup target add x86_64-unknown-linux-musl
RUN printf '[build]\n# Target musl-libc by default when running Cargo.\ntarget = "x86_64-unknown-linux-musl"\n' | install -D /dev/stdin /home/rust/.cargo/config

# We'll build our libraries in subdirectories of /home/rust/libs.  Please
# clean up when you're done.
WORKDIR /home/rust/libs

# Build a static library version of OpenSSL using musl-libc.  This is
# needed by the popular Rust `hyper` crate.
RUN echo "Building OpenSSL" && \
        VERS=1.0.2l && \
    curl -O https://www.openssl.org/source/openssl-$VERS.tar.gz && \
    tar xvzf openssl-$VERS.tar.gz && cd openssl-$VERS && \
    env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl linux-x86_64 && \
    env C_INCLUDE_PATH=/usr/local/musl/include/ make depend && \
    make && sudo make install && \
    cd .. && rm -rf openssl-$VERS.tar.gz openssl-$VERS && \
    echo "Building zlib" && \
    VERS=1.2.11 && \
    cd /home/rust/libs && \
    curl -LO http://zlib.net/zlib-$VERS.tar.gz && \
    tar xzf zlib-$VERS.tar.gz && cd zlib-$VERS && \
    CC=musl-gcc ./configure --static --prefix=/usr/local/musl && \
    make && sudo make install && \
    cd .. && rm -rf zlib-$VERS.tar.gz zlib-$VERS

ENV OPENSSL_DIR=/usr/local/musl/ \
    OPENSSL_INCLUDE_DIR=/usr/local/musl/include/ \
    DEP_OPENSSL_INCLUDE=/usr/local/musl/include/ \
    OPENSSL_LIB_DIR=/usr/local/musl/lib/ \
    OPENSSL_STATIC=1 \
    PKG_CONFIG_ALLOW_CROSS=true \
    PKG_CONFIG_ALL_STATIC=true

# (Please feel free to submit pull requests for musl-libc builds of other C
# libraries needed by the most popular and common Rust crates, to avoid
# everybody needing to build them manually.)

# Expect our source code to live in /home/rust/src.  We'll run the build as
# user `rust`, which will be uid 1000, gid 1000 outside the container.
WORKDIR /home/rust/src

ADD . /home/rust/src
# WORKDIR /usr/src/app
RUN cargo build --release --example server --features server

# provide artifacts on same place
RUN sudo cp "$(find target/ -name server -type f | head -1)" /server

FROM alpine:3.7 AS compressor
RUN  apk add --no-cache upx tini
COPY --from=builder /server /server
# COPY server /server
ARG UPX_ARGS=-6
RUN upx ${UPX_ARGS} /server

FROM busybox
RUN  mkdir -p /var/lib/asciii \
 &&  adduser -h /var/lib/asciii -S -D asciii
COPY --from=compressor /sbin/tini /sbin/tini
COPY --from=compressor /lib/ld-musl-x86_64.so.1 /lib/ld-musl-x86_64.so.1
RUN  ln -s /lib/ld-musl-x86_64.so.1 /lib/ld64.so.1
COPY --from=compressor /lib/libz.so.1           /lib/libz.so.1
COPY --from=compressor /server /bin/server

USER asciii
ENV ROCKET_ENV=production \
    ROCKET_PORT=8080 \
    ROCKET_ADDRESS=0.0.0.0 \
    ROCKET_SECRET_KEY=GVH5hYGVw1xTQyUHtx8MrDkuUmYSBJFbMsGwdSREQwk=

VOLUME /var/lib/asciii/.asciii_projects
ENTRYPOINT ["tini","--"]
CMD ["server"]